#### CAPP30122 Project 
# Ruxin Chen 
import bs4
import urllib3
import csv
import string
import re
import json
import math



class Attraction():

    def __init__(self, attraction_dict):

        # set the attraction dictionary to be private
        self.__attraction_dict = attraction_dict

        for k, v in self.attraction_dict.items():
            setattr(self, "label", k)
            setattr(self, "address", v["formatted_address"])
            setattr(self, "rating", v["rating"])
            setattr(self, "place_id", v["place_id"])
            setattr(self, "location", v["geometry"]["location"])
            setattr(self, "lat", self.location["lat"])
            setattr(self, "lng", self.location["lng"])
            setattr(self, "type", v["types"])

    def distance(attraction1, attraction2):  
        '''
        This is a theoretical/shortest distcence /could also send request to google map and get a
        a more realistic distance between the two spots. 
        '''         

        R = 6371 # radius of the earth in km

        dlat = math.radians(attraction2.lat - attraction1.lat)
        dlon = math.radians(attraction2.lon - attraction1.lon)

        haversine = math.sin(dlat/2) * math.sin(dlat/2) + \
        math.cos(math.redians(attraction1.lat)) * math.cos(math.redians(attraction2.lat)) *\
        math.sin(dlon/2) * math.sin(dlon/2)

        c = 2 * math.atan2(math.sqrt(haversine), math.sqrt(1 - haversine))
        distance = R * c 

        return distance


def find_shortest_dist(current, attraction_set, shortest_path):

    shortest_dist = math.inf
    for attr in attraction_set:
        dist = current.distance(attr) 
        if dist < shortest_dist:
            shortest_dist = dist
            shortest = attr
    shortest_path += shortest_path

    return shortest, shortest_path


def find_shortest_path(current = current_spot, attraction_set, \
    unvisited_set = None, order = None, shortest_path = 0):
    
    if unvisited_set is None:
        destination = find_shortest_dist(current, attraction_set, shortest_path)[0]
        unvisited_set = attraction_set.remove(destination)

    if order is None:
        order = []

    if not unvisited_set:
        return order, shortest_path
    else:
        shortest, shortest_path = find_shortest_dist(current, unvisited_set, shortest_path)
        unvisited_set.remove(shortest)
        order += [current.label]
        current = shortest
        find_shortest_path(current, destination, attraction_set, unvisited_set, order, shortest_path)








































